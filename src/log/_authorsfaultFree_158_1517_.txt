date(2023,8,15)
----------------------------------------------------------------------------------
Theory size: 12
Faults Number: 1,0
Cost Limit is: 15
RoundLimit is: 3
Running time: 61592 ms.
Heuristics applied:[]
The protected item(s):[[arity(bornIn)],[bornIn]]
Total Solution number is: 22
Remaining semi-repaired theories: 0
----------------------------------------------------------------------------------
The original theory : 
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isAmerican(\y),-isAmerican(f(\y)),-isCity(f(\y)),-bornIn(\y,f(\y))].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+createdBy(familySecrets,dani)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

The true set:
bornIn(dani,boston).

The false set: 
[]
All of 22 sorted repair plans are from: 
[expand([+[bornIn,vble(y),vble(z)],-[createdBy,[familySecrets],vble(y)],-[isAmerican,vble(y)],-[isAmerican,vble(z)],-[isCity,vble(z)],-[isWriter,vble(y)],-[writesNovel,vble(y)],-[writtenBy,[familyHistory],vble(y)]])].
[expand([+[bornIn,vble(z),vble(y)],-[createdBy,[familySecrets],vble(z)],-[isAmerican,vble(y)],-[isAmerican,vble(z)],-[isCity,vble(y)],-[isWriter,vble(z)],-[writesNovel,vble(z)],-[writtenBy,[familyHistory],vble(z)]])].
[expand([+[bornIn,vble(z),[boston]],-[createdBy,[familySecrets],vble(z)]])].
[expand([+[bornIn,vble(z),[boston]],-[isAmerican,vble(z)]])].
[expand([+[bornIn,vble(z),[boston]],-[isWriter,vble(z)]])].
[expand([+[bornIn,vble(z),[boston]],-[writesNovel,vble(z)]])].
[expand([+[bornIn,vble(z),[boston]],-[writtenBy,[familyHistory],vble(z)]])].
[expand([+[bornIn,vble(z),[f,[dani]]],-[createdBy,[familySecrets],vble(z)]])].
[expand([+[bornIn,vble(z),[f,[dani]]],-[isAmerican,vble(z)]])].
[expand([+[bornIn,vble(z),[f,[dani]]],-[isWriter,vble(z)]])].
[expand([+[bornIn,vble(z),[f,[dani]]],-[writesNovel,vble(z)]])].
[expand([+[bornIn,vble(z),[f,[dani]]],-[writtenBy,[familyHistory],vble(z)]])].
[expand([+[bornIn,[dani],vble(z)],-[isAmerican,vble(z)]])].
[expand([+[bornIn,[dani],vble(z)],-[isCity,vble(z)]])].
[expand([+[bornIn,[dani],[boston]]])].
[expand([+[bornIn,[dani],[f,[dani]]]])].
[merge(isAmerican,bornIn,[[boston]],inc)].
[merge(isAmerican,bornIn,[[f,[dani]]],inc)].
[merge(isWriter,bornIn,[[boston]],inc)].
[merge(isWriter,bornIn,[[f,[dani]]],inc)].
[merge(writesNovel,bornIn,[[boston]],inc)].
[merge(writesNovel,bornIn,[[f,[dani]]],inc)].

------------------ Solution No. 1 as below------------------
Repair plans found at Round 1/1 :
merge(writesNovel,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(\b,boston),-isNovel(\a),-writtenBy(\a,\b)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 2 as below------------------
Repair plans found at Round 1/1 :
merge(writesNovel,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(\b,f(dani)),-isNovel(\a),-writtenBy(\a,\b)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 3 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\y,\z),-createdBy(familySecrets,\y),-isAmerican(\y),-isAmerican(\z),-isCity(\z),-isWriter(\y),-writesNovel(\y),-writtenBy(familyHistory,\y)]).


Repaired Theory: 
[+bornIn(\y,\z),-createdBy(familySecrets,\y),-isAmerican(\y),-isAmerican(\z),-isCity(\z),-isWriter(\y),-writesNovel(\y),-writtenBy(familyHistory,\y)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 4 as below------------------
Repair plans found at Round 1/1 :
merge(isAmerican,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(\y,boston),-bornIn(\y,f(\y)),-bornIn(f(\y),boston),-isCity(f(\y))].
[+bornIn(boston,boston)].
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 5 as below------------------
Repair plans found at Round 1/1 :
merge(isAmerican,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(\y,f(dani)),-bornIn(\y,f(\y)),-bornIn(f(\y),f(dani)),-isCity(f(\y))].
[+bornIn(boston,f(dani))].
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 6 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,\y),-createdBy(familySecrets,\z),-isAmerican(\y),-isAmerican(\z),-isCity(\y),-isWriter(\z),-writesNovel(\z),-writtenBy(familyHistory,\z)]).


Repaired Theory: 
[+bornIn(\z,\y),-createdBy(familySecrets,\z),-isAmerican(\y),-isAmerican(\z),-isCity(\y),-isWriter(\z),-writesNovel(\z),-writtenBy(familyHistory,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 7 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,boston),-createdBy(familySecrets,\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-createdBy(familySecrets,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 8 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,boston),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 9 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,boston),-isWriter(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-isWriter(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 10 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,boston),-writesNovel(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-writesNovel(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 11 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,boston),-writtenBy(familyHistory,\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-writtenBy(familyHistory,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 12 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,f(dani)),-createdBy(familySecrets,\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-createdBy(familySecrets,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 13 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,f(dani)),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 14 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,f(dani)),-isWriter(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-isWriter(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 15 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,f(dani)),-writesNovel(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-writesNovel(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 16 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(\z,f(dani)),-writtenBy(familyHistory,\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-writtenBy(familyHistory,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 17 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(dani,\z),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(dani,\z),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 18 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(dani,\z),-isCity(\z)]).


Repaired Theory: 
[+bornIn(dani,\z),-isCity(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 19 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(dani,boston)]).


Repaired Theory: 
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 20 as below------------------
Repair plans found at Round 1/1 :
merge(isWriter,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 21 as below------------------
Repair plans found at Round 1/1 :
expand([+bornIn(dani,f(dani))]).


Repaired Theory: 
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 22 as below------------------
Repair plans found at Round 1/1 :
merge(isWriter,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

Solutions are found at rounds:[1/1]
