date(2023,8,15)
----------------------------------------------------------------------------------
Theory size: 12
Faults Number: 1,1
Cost Limit is: 15
RoundLimit is: 3
Running time: 63876 ms.
Heuristics applied:[]
The protected item(s):[[arity(bornIn)],[arity(writesNovel)],[bornIn],[writesNovel]]
Total Solution number is: 36
Remaining semi-repaired theories: 37
----------------------------------------------------------------------------------
The original theory : 
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isAmerican(\y),-isAmerican(f(\y)),-isCity(f(\y)),-bornIn(\y,f(\y))].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b)].
[+createdBy(familySecrets,dani)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

The true set:
bornIn(dani,boston).

The false set: 
writesNovel(dani).

All of 36 sorted repair plans are from: 
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(y),vble(z)],-[createdBy,[familySecrets],vble(y)],-[isAmerican,vble(y)],-[isAmerican,vble(z)],-[isCity,vble(z)],-[isWriter,vble(y)],-[writtenBy,[familyHistory],vble(y)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),vble(y)],-[createdBy,[familySecrets],vble(z)],-[isAmerican,vble(y)],-[isAmerican,vble(z)],-[isCity,vble(y)],-[isWriter,vble(z)],-[writtenBy,[familyHistory],vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[createdBy,[familySecrets],vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[isAmerican,vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[isWriter,vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[writtenBy,[familyHistory],vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[createdBy,[familySecrets],vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[isAmerican,vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[isWriter,vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[writtenBy,[familyHistory],vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],vble(z)],-[isAmerican,vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],vble(z)],-[isCity,vble(z)]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],[boston]]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],[f,[dani]]]])].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isAmerican,bornIn,[[boston]],inc)].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isAmerican,bornIn,[[f,[dani]]],inc)].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isWriter,bornIn,[[boston]],inc)].
[arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isWriter,bornIn,[[f,[dani]]],inc)].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(y),vble(z)],-[createdBy,[familySecrets],vble(y)],-[isAmerican,vble(y)],-[isAmerican,vble(z)],-[isCity,vble(z)],-[isWriter,vble(y)],-[writtenBy,[familyHistory],vble(y),[dummy_Abnormal1]]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),vble(y)],-[createdBy,[familySecrets],vble(z)],-[isAmerican,vble(y)],-[isAmerican,vble(z)],-[isCity,vble(y)],-[isWriter,vble(z)],-[writtenBy,[familyHistory],vble(z),[dummy_Abnormal1]]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[createdBy,[familySecrets],vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[isAmerican,vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[isWriter,vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[boston]],-[writtenBy,[familyHistory],vble(z),[dummy_Abnormal1]]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[createdBy,[familySecrets],vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[isAmerican,vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[isWriter,vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,vble(z),[f,[dani]]],-[writtenBy,[familyHistory],vble(z),[dummy_Abnormal1]]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],vble(z)],-[isAmerican,vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],vble(z)],-[isCity,vble(z)]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],[boston]]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),expand([+[bornIn,[dani],[f,[dani]]]])].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isAmerican,bornIn,[[boston]],inc)].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isAmerican,bornIn,[[f,[dani]]],inc)].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isWriter,bornIn,[[boston]],inc)].
[arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]),merge(isWriter,bornIn,[[f,[dani]]],inc)].

------------------ Solution No. 1 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\y,\z),-createdBy(familySecrets,\y),-isAmerican(\y),-isAmerican(\z),-isCity(\z),-isWriter(\y),-writtenBy(familyHistory,\y)]).


Repaired Theory: 
[+bornIn(\y,\z),-createdBy(familySecrets,\y),-isAmerican(\y),-isAmerican(\z),-isCity(\z),-isWriter(\y),-writtenBy(familyHistory,\y)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 2 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\y,\z),-createdBy(familySecrets,\y),-isAmerican(\y),-isAmerican(\z),-isCity(\z),-isWriter(\y),-writtenBy(familyHistory,\y,dummy_Abnormal1)]).


Repaired Theory: 
[+bornIn(\y,\z),-createdBy(familySecrets,\y),-isAmerican(\y),-isAmerican(\z),-isCity(\z),-isWriter(\y),-writtenBy(familyHistory,\y,dummy_Abnormal1)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 3 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isAmerican,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(\y,boston),-bornIn(\y,f(\y)),-bornIn(f(\y),boston),-isCity(f(\y))].
[+bornIn(boston,boston)].
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 4 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isAmerican,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(\y,boston),-bornIn(\y,f(\y)),-bornIn(f(\y),boston),-isCity(f(\y))].
[+bornIn(boston,boston)].
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 5 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isAmerican,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(\y,f(dani)),-bornIn(\y,f(\y)),-bornIn(f(\y),f(dani)),-isCity(f(\y))].
[+bornIn(boston,f(dani))].
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 6 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isAmerican,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(\y,f(dani)),-bornIn(\y,f(\y)),-bornIn(f(\y),f(dani)),-isCity(f(\y))].
[+bornIn(boston,f(dani))].
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 7 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,\y),-createdBy(familySecrets,\z),-isAmerican(\y),-isAmerican(\z),-isCity(\y),-isWriter(\z),-writtenBy(familyHistory,\z)]).


Repaired Theory: 
[+bornIn(\z,\y),-createdBy(familySecrets,\z),-isAmerican(\y),-isAmerican(\z),-isCity(\y),-isWriter(\z),-writtenBy(familyHistory,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 8 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,\y),-createdBy(familySecrets,\z),-isAmerican(\y),-isAmerican(\z),-isCity(\y),-isWriter(\z),-writtenBy(familyHistory,\z,dummy_Abnormal1)]).


Repaired Theory: 
[+bornIn(\z,\y),-createdBy(familySecrets,\z),-isAmerican(\y),-isAmerican(\z),-isCity(\y),-isWriter(\z),-writtenBy(familyHistory,\z,dummy_Abnormal1)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 9 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-createdBy(familySecrets,\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-createdBy(familySecrets,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 10 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-createdBy(familySecrets,\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-createdBy(familySecrets,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 11 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 12 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 13 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-isWriter(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-isWriter(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 14 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-isWriter(\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-isWriter(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 15 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-writtenBy(familyHistory,\z)]).


Repaired Theory: 
[+bornIn(\z,boston),-writtenBy(familyHistory,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 16 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,boston),-writtenBy(familyHistory,\z,dummy_Abnormal1)]).


Repaired Theory: 
[+bornIn(\z,boston),-writtenBy(familyHistory,\z,dummy_Abnormal1)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 17 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-createdBy(familySecrets,\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-createdBy(familySecrets,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 18 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-createdBy(familySecrets,\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-createdBy(familySecrets,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 19 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 20 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 21 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-isWriter(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-isWriter(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 22 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-isWriter(\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-isWriter(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 23 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-writtenBy(familyHistory,\z)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-writtenBy(familyHistory,\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 24 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(\z,f(dani)),-writtenBy(familyHistory,\z,dummy_Abnormal1)]).


Repaired Theory: 
[+bornIn(\z,f(dani)),-writtenBy(familyHistory,\z,dummy_Abnormal1)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 25 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,\z),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(dani,\z),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 26 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,\z),-isAmerican(\z)]).


Repaired Theory: 
[+bornIn(dani,\z),-isAmerican(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 27 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,\z),-isCity(\z)]).


Repaired Theory: 
[+bornIn(dani,\z),-isCity(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 28 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,\z),-isCity(\z)]).


Repaired Theory: 
[+bornIn(dani,\z),-isCity(\z)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 29 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,boston)]).


Repaired Theory: 
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 30 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isWriter,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 31 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,boston)]).


Repaired Theory: 
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 32 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isWriter,bornIn,[[boston]],inc).


Repaired Theory: 
[+bornIn(dani,boston)].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 33 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,f(dani))]).


Repaired Theory: 
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 34 as below------------------
Repair plans found at Round 2/2 :
arityInc(writtenBy,+[writtenBy,[familyHistory],[dani]],[+[writtenBy,[familyHistory],[dani]]],-[writtenBy,vble(a),vble(b)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isWriter,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory)].
[+isPodCast(familySecrets)].
[+writesNovel(\b),-isNovel(\a),-writtenBy(\a,\b,dummy_Normal1)].
[+writtenBy(familyHistory,dani,dummy_Abnormal1)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x),-isPodCast(\x)].

------------------ Solution No. 35 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
expand([+bornIn(dani,f(dani))]).


Repaired Theory: 
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+isWriter(dani)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

------------------ Solution No. 36 as below------------------
Repair plans found at Round 2/3 :
arityInc(isNovel,+[isNovel,[familyHistory]],[+[isNovel,[familyHistory]]],-[isNovel,vble(a)],[+[writesNovel,vble(b)],-[isNovel,vble(a)],-[writtenBy,vble(a),vble(b)]]).
merge(isWriter,bornIn,[[f,[dani]]],inc).


Repaired Theory: 
[+bornIn(dani,f(dani))].
[+createdBy(familySecrets,dani)].
[+isAmerican(\y),-bornIn(\y,f(\y)),-isAmerican(f(\y)),-isCity(f(\y))].
[+isAmerican(boston)].
[+isAmerican(dani)].
[+isCity(boston)].
[+isNovel(familyHistory,dummy_Abnormal1)].
[+isPodCast(familySecrets)].
[+writesNovel(\b),-isNovel(\a,dummy_Normal1),-writtenBy(\a,\b)].
[+writtenBy(familyHistory,dani)].
[+writtenIn(familyHistory,y2003)].
[-isNovel(\x,dummy_Normal1),-isPodCast(\x)].

Solutions are found at rounds:[1/3,1/4,1/5,1/6,1/7,1/8,1/9,1/10,1/11,1/12,1/13,1/14,1/15,1/16,1/17,1/18,1/19,1/20,1/21,1/22,1/23,1/24,1/25,1/26,1/27,1/28,1/29,1/30,1/31,1/32,1/33,1/34,1/35,1/36,1/37,1/38,1/39]
